{"version":3,"sources":["webpack:///src/app/pages/igreja/modal-igreja/modal-igreja-routing.module.ts","webpack:///src/app/pages/igreja/modal-igreja/modal-igreja.module.ts","webpack:///src/app/providers/igreja/igreja.service.ts","webpack:///src/app/repository/igreja/igreja-rep.service.ts"],"names":["routes","path","component","ModalIgrejaPageRoutingModule","imports","forChild","exports","ModalIgrejaPageModule","declarations","IgrejaService","igrejaRepService","RecuperaTodasAsIgrejas","usuarioId","RecuperaIgrejaPorAdministrador","obj","add","cidade","RecuperaIgrejasPorCidade","uf","bairro","RecuperaIgrejasPorEndereco","igrejas","RecuperaNomeIgreja","providedIn","IgrejaRepService","_collectionName","Promise","resolve","reject","query","db","collection","where","get","then","result","lst","forEach","doc","push","data","err","find","elemento","tipoComparacao","comparacao"],"mappings":"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","file":"pages-igreja-modal-igreja-modal-igreja-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ModalIgrejaPage } from './modal-igreja.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ModalIgrejaPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ModalIgrejaPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ModalIgrejaPageRoutingModule } from './modal-igreja-routing.module';\n\nimport { ModalIgrejaPage } from './modal-igreja.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ModalIgrejaPageRoutingModule\n  ],\n  declarations: [ModalIgrejaPage]\n})\nexport class ModalIgrejaPageModule {}\n","import { Injectable } from '@angular/core';\nimport { IgrejaRepService } from 'src/app/repository/igreja/igreja-rep.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IgrejaService {\n  RecuperaTodasAsIgrejas() : Promise<any[]>{\n    return this.igrejaRepService.RecuperaTodasAsIgrejas();\n  }\n\n\n  constructor(public igrejaRepService: IgrejaRepService) { }\n\n\n  RecuperaIgrejaPorAdministrador(usuarioId:any):Promise<any[]>{\n    return  this.igrejaRepService.RecuperaIgrejaPorAdministrador(usuarioId);\n\n  }\n\n  AdicionarNovaIgreja(obj : any) : Promise<any>{\n    return  this.igrejaRepService.add(obj,null);\n  }\n\n  RecuperaIgrejasPorCidade(cidade:string) : Promise<any[]>{\n    return this.igrejaRepService.RecuperaIgrejasPorCidade(cidade);\n  }\n  \n  RecuperaIgrejasPorEndereco(uf:string, cidade:string, bairro:string) : Promise<any[]>{\n    return this.igrejaRepService.RecuperaIgrejasPorEndereco(uf,cidade,bairro);\n  }\n\n  RecuperaNomeIgreja(igrejas: string[]) {\n    return this.igrejaRepService.RecuperaNomeIgreja(igrejas);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseRepository } from '../repository-interface/Repository-Base';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IgrejaRepService extends BaseRepository {\n\n  constructor() {\n    super();\n\n    this._collectionName = \"igreja\";\n  }\n\n  RecuperaIgrejasPorEndereco(uf: string, cidade: string, bairro: string): Promise<any[]> {\n    return new Promise<any>((resolve, reject) => {\n      let query = this.db.collection('igreja')\n        .where(\"uf\", \"==\", uf);\n\n      if (cidade) {\n        query = query.where(\"cidade\", \"==\", cidade)\n      }\n\n      if (bairro) {\n        query = query.where(\"bairro\", \"==\", bairro)\n      }\n\n      query.get()\n        .then((result) => {\n\n          let lst = [];\n          result.forEach(function (doc) {\n\n            lst.push(doc.data());\n\n          });\n          resolve(lst)\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n  }\n\n\n\n  RecuperaIgrejaPorAdministrador(usuarioId): Promise<any[]> {\n    return new Promise<any>((resolve, reject) => {\n      this.db.collection('igreja')\n        .where(\"administradores\", \"array-contains\", usuarioId)\n        .get()\n        .then((result) => {\n          let lst = [];\n          result.forEach(function (doc) {\n\n            lst.push(doc.data());\n\n          });\n          resolve(lst)\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n  }\n\n  RecuperaIgrejasPorCidade(cidade: string): Promise<any[]> {\n\n    return this.find({ elemento: \"cidade\", tipoComparacao: \"==\", comparacao: cidade });\n  }\n\n  RecuperaNomeIgreja(igrejas: string[]) : Promise<any[]> {\n\n    // return this.db.collection(\"igreja\").where(firebase.firestore.FieldPath.documentId(),\"array-contains\",igrejas).get()\n    return this.find({ elemento: \"id\", tipoComparacao: \"in\", comparacao: igrejas });\n  }\n\n  RecuperaTodasAsIgrejas(): Promise<any[]> {\n    return new Promise<any>((resolve, reject) => {\n      this.db.collection('igreja')\n      .get()\n      .then((result) => {\n        let lst = [];\n        result.forEach(function (doc) {\n          lst.push(doc.data());\n        });\n        resolve(lst)\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n\n}\n}\n"]}